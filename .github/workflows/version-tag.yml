name: CI and Merge

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main

jobs:
  # Docker „Ç§„É°„Éº„Ç∏„Çí„Éì„É´„ÉâÔºàÊúÄÂàù„Å´ÂÆüË°åÔºâ
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-exists: ${{ steps.check-image.outputs.exists }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check-image
        run: |
          if docker pull ghcr.io/${{ github.repository_owner }}/msearch-e2e:latest 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "üê≥ Docker image already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "üì¶ Need to build Docker image"
          fi

      - name: Set up Docker Buildx
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: steps.check-image.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.e2e
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/msearch-e2e:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # „Éï„Ç©„Éº„Éû„ÉÉ„Éà„Å®„É™„É≥„ÉàÔºàÊúÄÂ∞è‰æùÂ≠òÈñ¢‰øÇ„ÅßË∂ÖÈ´òÈÄüÂÆüË°åÔºâ
  lint-and-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [lint, fmt]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache lint dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .eslintcache
          key: lint-${{ matrix.check }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            lint-${{ matrix.check }}-${{ runner.os }}-

      - name: Install ${{ matrix.check }} dependencies only
        run: |
          export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
          export PUPPETEER_SKIP_DOWNLOAD=1
          if [ "${{ matrix.check }}" == "lint" ]; then
            # ESLintÈñ¢ÈÄ£„ÅÆ„Åø„Ç§„É≥„Çπ„Éà„Éº„É´
            npm install eslint @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint-config-prettier eslint-plugin-prettier --no-save --silent
          else
            # PrettierÈñ¢ÈÄ£„ÅÆ„Åø„Ç§„É≥„Çπ„Éà„Éº„É´
            npm install prettier --no-save --silent
          fi
        timeout-minutes: 2

      - name: Run ${{ matrix.check }}
        run: |
          if [ "${{ matrix.check }}" == "lint" ]; then
            npx eslint . --ext .ts --ignore-path .eslintignore --cache
          elif [ "${{ matrix.check }}" == "fmt" ]; then
            npx prettier --check "**/*.{ts,json,md}" --ignore-path .prettierignore
          else
            echo "Unknown check: ${{ matrix.check }}"
            exit 1
          fi
        timeout-minutes: 2

  # „ÉÜ„Çπ„ÉàÔºàÁ®ÆÈ°ûÂà•‰∏¶ÂàóÂÆüË°å„ÄÅDocker„Ç§„É°„Éº„Ç∏„Éì„É´„ÉâÂæåÔºâ
  parallel-tests:
    runs-on: ubuntu-latest
    needs: [build-docker-image, lint-and-format]
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        test-type: [unit, lightweight, e2e-ci]
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run ${{ matrix.test-type }} tests
        run: |
          # Docker„Ç§„É°„Éº„Ç∏„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØ‰ΩøÁî®
          if [ "${{ needs.build-docker-image.outputs.image-exists }}" == "true" ] || docker pull ghcr.io/${{ github.repository_owner }}/msearch-e2e:latest 2>/dev/null; then
            echo "üê≥ Running ${{ matrix.test-type }} tests in Docker"
            docker run --rm \
              -v ${{ github.workspace }}:/app:ro \
              -w /app \
              -e CI=true \
              -e NODE_ENV=test \
              ghcr.io/${{ github.repository_owner }}/msearch-e2e:latest \
              test:${{ matrix.test-type }}
          else
            echo "üì¶ Fallback to npm for ${{ matrix.test-type }} tests"
            export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
            npm ci --prefer-offline --no-audit --no-fund --silent
            export CI=true NODE_ENV=test
            npm run test:${{ matrix.test-type }}
          fi
        timeout-minutes: 8

  merge-to-main:
    needs: [build-docker-image, lint-and-format, parallel-tests]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Merge to main
        run: |
          git checkout main
          git merge develop --no-ff -m "üîÄ Merge develop to main"
          git push origin main
