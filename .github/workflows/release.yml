# リリースワークフロー - バージョンアップとタグ作成
#
# mainブランチへのマージ時に実行:
# 1. package.jsonのバージョンを自動アップ（minor version）
# 2. 新しいバージョンタグを作成
# 3. GitHub Releaseを作成

name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write
      packages: write
      deployments: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY_B64 }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git config --local commit.gpgsign true

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "📋 Latest tag: $LATEST_TAG"

      - name: Generate new version
        id: generate_version
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Minor version up (0.1.0 -> 0.2.0)
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="v${MAJOR}.${NEW_MINOR}.0"
          NEW_VERSION_NO_V="${MAJOR}.${NEW_MINOR}.0"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_version_no_v=$NEW_VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "🚀 New version: $NEW_VERSION"

      - name: Update package.json version
        run: |
          # package.jsonのバージョンを更新
          npm version "${{ steps.generate_version.outputs.new_version_no_v }}" --no-git-tag-version

          # 変更をコミット
          git add package.json package-lock.json
          git commit -m "🔖 Bump version to ${{ steps.generate_version.outputs.new_version }}"
          git push origin main

      - name: Create and push tag
        run: |
          # タグを作成してプッシュ
          git tag "${{ steps.generate_version.outputs.new_version }}"
          git push origin "${{ steps.generate_version.outputs.new_version }}"
          echo "✅ Created and pushed tag: ${{ steps.generate_version.outputs.new_version }}"

      - name: Generate release notes
        id: release_notes
        run: |
          # 前回のタグから今回までのコミットログを取得
          PREVIOUS_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          NEW_TAG="${{ steps.generate_version.outputs.new_version }}"

          echo "## 🚀 What's Changed" > release_notes.md
          echo "" >> release_notes.md

          # コミットログを取得（マージコミットを除外）
          git log ${PREVIOUS_TAG}..HEAD --oneline --no-merges --pretty=format:"- %s" >> release_notes.md

          echo "" >> release_notes.md
          echo "## 📦 Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "npm install -g https://github.com/${{ github.repository }}.git#${NEW_TAG}" >> release_notes.md
          echo '```' >> release_notes.md

          # リリースノートの内容を出力に設定
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ steps.generate_version.outputs.new_version }}
          release_name: Release ${{ steps.generate_version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
