# リリースワークフロー - バージョンアップとタグ作成
#
# mainブランチへのマージ時に実行:
# 1. package.jsonのバージョンを自動アップ（minor version）
# 2. 新しいバージョンタグを作成
# 3. GitHub Releaseを作成

name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'miyako-maps-search.ts'
      - 'package.json'
      - 'tsconfig.json'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release even without build changes'
        required: false
        default: 'false'
        type: boolean

jobs:
  check-changes:
    runs-on: ubuntu-latest
    # CIからの自動マージまたは手動実行の場合のみ実行
    if: contains(github.event.head_commit.message, 'Auto-merge from develop') || github.event_name == 'workflow_dispatch'
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if build file changed
        id: check
        run: |
          # 手動実行でforce_releaseがtrueの場合は強制実行
          if [[ "${{ github.event.inputs.force_release }}" == "true" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "🚀 Force release enabled - proceeding with release"
          # 手動実行の場合（force_releaseがfalseまたは未設定）
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "🚀 Manual release triggered - proceeding with release"
          # 通常のpushイベントの場合
          elif git diff HEAD~1 HEAD --name-only | grep -q "build/miyako-maps-search.js"; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "✅ build/miyako-maps-search.js has changes - proceeding with release"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No changes in build/miyako-maps-search.js - skipping release"
          fi

  release:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-release == 'true'
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write
      packages: write
      deployments: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Install dependencies and build
        run: |
          npm install typescript@5.5.4 --no-save --no-optional
          npm run build

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "📋 Latest tag: $LATEST_TAG"

      - name: Generate new version
        id: generate_version
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Minor version up (0.1.0 -> 0.2.0)
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="v${MAJOR}.${NEW_MINOR}.0"
          NEW_VERSION_NO_V="${MAJOR}.${NEW_MINOR}.0"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_version_no_v=$NEW_VERSION_NO_V" >> $GITHUB_OUTPUT
          echo "🚀 New version: $NEW_VERSION"

      - name: Update package.json version
        run: |
          # 現在のバージョンを取得
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          NEW_VERSION="${{ steps.generate_version.outputs.new_version_no_v }}"
          
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          
          # バージョンが同じ場合はスキップ
          if [ "$CURRENT_VERSION" = "$NEW_VERSION" ]; then
            echo "ℹ️ Version already up to date, skipping version update"
          else
            # package.jsonのバージョンを更新
            npm version "$NEW_VERSION" --no-git-tag-version

            # 変更をコミット（ビルド成果物も含める）
            git add package.json package-lock.json build/
            git commit -m "🔖 Bump version to ${{ steps.generate_version.outputs.new_version }}"
            git push origin main
          fi

      - name: Create and push tag
        run: |
          # タグを作成してプッシュ
          git tag "${{ steps.generate_version.outputs.new_version }}"
          git push origin "${{ steps.generate_version.outputs.new_version }}"
          echo "✅ Created and pushed tag: ${{ steps.generate_version.outputs.new_version }}"

      - name: Generate release notes
        id: release_notes
        run: |
          # 前回のタグから今回までのコミットログを取得
          PREVIOUS_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          NEW_TAG="${{ steps.generate_version.outputs.new_version }}"

          echo "## 🚀 What's Changed" > release_notes.md
          echo "" >> release_notes.md

          # コミットログを取得（マージコミットを除外）
          # 初回リリースの場合（タグが存在しない場合）は全履歴を取得
          if git rev-parse "${PREVIOUS_TAG}" >/dev/null 2>&1; then
            git log ${PREVIOUS_TAG}..HEAD --oneline --no-merges --pretty=format:"- %s" >> release_notes.md
          else
            echo "- Initial release" >> release_notes.md
            echo "- 宮古諸島専用Google Maps検索CLIツール" >> release_notes.md
            echo "- TypeScript + Playwright による高速検索" >> release_notes.md
            echo "- インタラクティブモード対応" >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## 📦 Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "npm install -g https://github.com/${{ github.repository }}.git#${NEW_TAG}" >> release_notes.md
          echo '```' >> release_notes.md

          # リリースノートの内容を出力に設定
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: ${{ steps.generate_version.outputs.new_version }}
          release_name: Release ${{ steps.generate_version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
          draft: false
          prerelease: false
