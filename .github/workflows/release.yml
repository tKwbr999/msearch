name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-deps-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
          npm ci --prefer-offline --no-audit --timeout=300000 --maxsockets=1
        timeout-minutes: 10

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Get latest tag
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.7.1")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Generate new version
        id: generate_version
        run: |
          LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          NEW_VERSION_NUMBER="${MAJOR}.${MINOR}.${NEW_PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_version_number=$NEW_VERSION_NUMBER" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version "${{ steps.generate_version.outputs.new_version_number }}" --no-git-tag-version

      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "🚀 Release ${{ steps.generate_version.outputs.new_version }}"
          git push origin main

      - name: Create and push tag
        run: |
          git tag "${{ steps.generate_version.outputs.new_version }}"
          git push origin "${{ steps.generate_version.outputs.new_version }}"

      - name: Update latest tag
        run: |
          git tag -f latest
          git push origin latest --force

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_version.outputs.new_version }}
          release_name: Release ${{ steps.generate_version.outputs.new_version }}
          body: |
            🚀 自動リリース ${{ steps.generate_version.outputs.new_version }}
            
            ## インストール方法
            ```bash
            # シンプルインストール（推奨）
            npm install -g https://github.com/tKwbr999/msearch.git
            
            # 最新タグでのインストール
            npm install -g https://github.com/tKwbr999/msearch.git#latest
            
            # 特定バージョンでのインストール
            npm install -g https://github.com/tKwbr999/msearch.git#${{ steps.generate_version.outputs.new_version }}
            ```
            
            ## 変更内容
            developブランチからの最新の変更が含まれています。
          draft: false
          prerelease: false

      - name: Sync back to develop
        run: |
          git checkout develop
          git merge main --no-ff -m "🔄 Sync version update from main"
          git push origin develop