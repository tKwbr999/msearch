# CI/CD ワークフロー - 効率的な並列実行とテスト
#
# トリガー条件:
# - developブランチへのpush
# - 全てのブランチへのPR
# - 手動実行 (workflow_dispatch)
#
# 実行フロー:
# 1. check: フォーマット・リントチェック (最小依存関係)
# 2. unit-tests: 単体テスト (check完了後)
# 3. e2e-tests: E2Eテスト (Playwright Docker環境)
# 4. merge-to-main: mainへのPRの場合のみ自動マージ

name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    # 全てのブランチへのPRで実行
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  NODE_VERSION: '20'
  # npm設定の最適化
  NPM_CONFIG_PROGRESS: 'false'
  NPM_CONFIG_AUDIT: 'false'
  NPM_CONFIG_FUND: 'false'
  NPM_CONFIG_LOGLEVEL: 'warn'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-test: ${{ steps.changes.outputs.should-test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for relevant changes
        id: changes
        run: |
          # 関連ファイルの変更をチェック
          if git diff HEAD~1 HEAD --name-only | grep -E '\.(ts|json)$|package-lock\.json$' > /dev/null; then
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "✅ Code changes detected - running tests"
            git diff HEAD~1 HEAD --name-only | grep -E '\.(ts|json)$|package-lock\.json$'
          else
            echo "should-test=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No code changes detected - skipping tests"
          fi

  check:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-test == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org/'

      - name: Cache dependencies for lint/format
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules/.cache
          key: lint-format-deps-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            lint-format-deps-${{ runner.os }}-

      - name: Configure npm for CI
        run: |
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 3
          # キャッシュクリア
          npm cache clean --force || true
          echo "🔧 npm configuration:"
          npm config list

      - name: Install minimal dependencies for formatting and linting
        run: |
          set -e
          export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1
          export PUPPETEER_SKIP_DOWNLOAD=1

          echo "📦 Installing formatting and linting dependencies..."
          echo "Start time: $(date)"

          # リトライ機能付きインストール
          success=false
          for i in {1..3}; do
            echo "🔄 Attempt $i/3"
            if npm install prettier@3.2.5 eslint@8.56.0 @typescript-eslint/eslint-plugin@7.1.0 @typescript-eslint/parser@7.1.0 eslint-config-prettier@9.1.0 eslint-plugin-prettier@5.1.3 typescript@5.5.4 --no-save --no-optional --prefer-offline; then
              echo "✅ Installation successful on attempt $i"
              success=true
              break
            else
              echo "❌ Installation failed on attempt $i"
              if [ $i -lt 3 ]; then
                echo "⏳ Waiting 10 seconds before retry..."
                sleep 10
                npm cache clean --force || true
              fi
            fi
          done

          # npmが失敗した場合のフォールバック: 個別インストール
          if [ "$success" = false ]; then
            echo "🚨 npm install failed, trying individual package installation..."
            npm install prettier@3.2.5 --no-save --no-optional
            npm install eslint@8.56.0 --no-save --no-optional
            npm install @typescript-eslint/eslint-plugin@7.1.0 --no-save --no-optional
            npm install @typescript-eslint/parser@7.1.0 --no-save --no-optional
            npm install eslint-config-prettier@9.1.0 --no-save --no-optional
            npm install eslint-plugin-prettier@5.1.3 --no-save --no-optional
            npm install typescript@5.5.4 --no-save --no-optional
          fi

          echo "End time: $(date)"
          echo "📊 Installed packages:"
          npm list --depth=0 || true
        timeout-minutes: 5

      - name: Build TypeScript
        run: npx tsc
        timeout-minutes: 2

      - name: Check formatting
        run: npx prettier --check "**/*.{ts,json,md}" --ignore-path .prettierignore
        timeout-minutes: 2

      - name: Run linting
        run: npx eslint . --ext .ts --ignore-path .eslintignore
        timeout-minutes: 2

  unit-tests:
    runs-on: ubuntu-latest
    needs: [check-changes, check]
    if: needs.check-changes.outputs.should-test == 'true'
    timeout-minutes: 8
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org/'

      - name: Configure npm for CI
        run: |
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 3
          # キャッシュクリア
          npm cache clean --force || true

      - name: Install minimal dependencies for unit tests
        run: |
          set -e
          echo "📦 Installing unit test dependencies..."
          echo "Start time: $(date)"

          # リトライ機能付きインストール
          success=false
          for i in {1..3}; do
            echo "🔄 Attempt $i/3"
            if npm install jest@29.7.0 typescript@5.5.4 --no-save --no-optional --prefer-offline; then
              echo "✅ Installation successful on attempt $i"
              success=true
              break
            else
              echo "❌ Installation failed on attempt $i"
              if [ $i -lt 3 ]; then
                echo "⏳ Waiting 10 seconds before retry..."
                sleep 10
                npm cache clean --force || true
              fi
            fi
          done

          # 最終的にまだ失敗している場合のフォールバック
          if [ "$success" = false ]; then
            echo "🚨 npm install failed, trying without cache..."
            npm install jest@29.7.0 typescript@5.5.4 --no-save --no-optional --no-cache
          fi

          echo "End time: $(date)"
          echo "📊 Installed packages:"
          npm list --depth=0 || true
        timeout-minutes: 3

      - name: Build TypeScript
        run: npx tsc
        timeout-minutes: 2

      - name: Run unit tests
        run: npm run test:unit
        timeout-minutes: 3

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [check-changes]
    if: needs.check-changes.outputs.should-test == 'true'
    timeout-minutes: 20
    container:
      image: mcr.microsoft.com/playwright:v1.42.1-jammy
      options: --user 1001
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org/'

      - name: Configure npm for CI
        run: |
          npm config set registry https://registry.npmjs.org/
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 3
          # キャッシュクリア
          npm cache clean --force || true
          echo "🔧 npm configuration:"
          npm config list

      - name: Install minimal dependencies for E2E tests
        run: |
          set -e
          echo "📦 Installing E2E test dependencies..."
          echo "Start time: $(date)"

          # リトライ機能付きインストール
          success=false
          for i in {1..3}; do
            echo "🔄 Attempt $i/3"
            if npm install jest@29.7.0 cheerio@1.0.0-rc.12 typescript@5.5.4 --no-save --no-optional --prefer-offline; then
              echo "✅ Installation successful on attempt $i"
              success=true
              break
            else
              echo "❌ Installation failed on attempt $i"
              if [ $i -lt 3 ]; then
                echo "⏳ Waiting 10 seconds before retry..."
                sleep 10
                npm cache clean --force || true
              fi
            fi
          done

          # フォールバック: 個別インストール
          if [ "$success" = false ]; then
            echo "🚨 npm install failed, trying individual package installation..."
            npm install jest@29.7.0 --no-save --no-optional --no-cache
            npm install cheerio@1.0.0-rc.12 --no-save --no-optional --no-cache
            npm install typescript@5.5.4 --no-save --no-optional --no-cache
          fi

          echo "End time: $(date)"
          echo "📊 Installed packages:"
          npm list --depth=0 || true
        timeout-minutes: 5

      - name: Build TypeScript
        run: npx tsc
        timeout-minutes: 2

      - name: Run E2E tests
        run: npm run test:e2e-ci
        env:
          CI: true
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
        timeout-minutes: 10

  merge-to-main:
    runs-on: ubuntu-latest
    needs: [check-changes, unit-tests, e2e-tests]
    # developブランチからmainへのマージを自動実行
    # pushイベント（developブランチ）またはmainへのPRで実行
    # テストがスキップされた場合でもマージは実行
    if: |
      always() && 
      (github.event_name == 'push' && github.ref == 'refs/heads/develop') || 
      (github.event_name == 'pull_request' && github.base_ref == 'main') &&
      (needs.check-changes.outputs.should-test == 'false' || 
       (needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop
          token: ${{ secrets.PAT_TOKEN }}

      - name: Merge to main
        run: |
          git fetch origin main:main
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout main
          
          # developブランチの変更を優先してマージ
          git merge develop -X theirs -m "Auto-merge from develop after successful tests"
          
          # コンフリクトが発生した場合の追加処理
          if [ $? -ne 0 ]; then
            echo "Merge conflict detected, resolving..."
            # package.jsonのコンフリクトを自動解決（developブランチを優先）
            git checkout develop -- package.json
            git add package.json
            git commit -m "Auto-merge from develop after successful tests (resolved conflicts)"
          fi
          
          # TypeScriptをビルドしてlib/ディレクトリを更新
          npm install typescript@5.5.4 --no-save --no-optional
          npm run build
          
          # bin/ディレクトリを作成（存在しない場合）
          if [ ! -d "bin" ]; then
            mkdir -p bin
            echo '#!/usr/bin/env node' > bin/msearch
            echo '' >> bin/msearch
            echo '// msearch CLI entry point' >> bin/msearch
            echo 'const path = require("path");' >> bin/msearch
            echo 'const fs = require("fs");' >> bin/msearch
            echo '' >> bin/msearch
            echo '// Get the directory where this script is located' >> bin/msearch
            echo 'const binDir = __dirname;' >> bin/msearch
            echo 'const packageDir = path.dirname(binDir);' >> bin/msearch
            echo 'const buildScript = path.join(packageDir, "lib", "miyako-maps-search.js");' >> bin/msearch
            echo '' >> bin/msearch
            echo '// Check if build script exists' >> bin/msearch
            echo 'if (!fs.existsSync(buildScript)) {' >> bin/msearch
            echo '  console.error("Error: msearch build file not found at", buildScript);' >> bin/msearch
            echo '  console.error("Please reinstall msearch: npm install -g msearch");' >> bin/msearch
            echo '  process.exit(1);' >> bin/msearch
            echo '}' >> bin/msearch
            echo '' >> bin/msearch
            echo '// Execute the main script' >> bin/msearch
            echo 'require(buildScript);' >> bin/msearch
            chmod +x bin/msearch
            echo "📁 Created bin/msearch entry point"
          fi
          
          # ビルド成果物をコミット
          if ! git diff --quiet lib/ bin/ 2>/dev/null; then
            echo "📦 Build output changed, committing..."
            git add lib/ bin/
            git commit -m "🔨 Update lib and bin output from develop merge"
          else
            echo "ℹ️ No build changes detected"
          fi
          
          git push origin main
